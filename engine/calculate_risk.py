# -*- coding: utf-8 -*-
"""calculate_risk.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_oKEjl4iTKPGTbDa_nF4kQprTb-ioF_r
"""

pip install anvil-uplink

import numpy as np
import pandas as pd
import anvil.server

crypto_df = pd.read_csv("crypto-markets.csv")
crypto_df.head()

crypto_df = crypto_df[crypto_df['date'].str.startswith("2018")]
crypto_df = crypto_df[crypto_df['date'] != "2018-11-30"]
crypto_df['daily_returns'] = (crypto_df['close'] - crypto_df['open']) / (crypto_df['open']) * 100
crypto_df.head()

bt_df = crypto_df[crypto_df['name'] == "Bitcoin"]
bt_df.tail()

four_two_df = crypto_df[crypto_df['name'] == "Project-X"]
four_two_df.tail()



names = crypto_df['name'].unique()
names

benchmark_std = np.std(bt_df['daily_returns'])
lst = list()
lst1 = list()
def calculate_volatility(crypto_name):
  b1_df = crypto_df[crypto_df['name'].str.lower() == crypto_name.lower()]
  if (b1_df.shape[0] != 333):
    return
  b1_std = np.std(b1_df['daily_returns'])
  temp = np.corrcoef(b1_df['daily_returns'], bt_df['daily_returns'])[0][1]
  return temp * (b1_std / benchmark_std), temp

for name in names:
  temp = calculate_volatility(name)
  if temp is not None:
    beta, corr = temp
    lst.append(beta)
    lst1.append(corr)
  else:
    lst.append(None)
    lst1.append(None)

names = [x.lower() for x in names]
df_betas = pd.DataFrame({"Name": names, "Beta": lst, "Correlation": lst1})
df_cleaned = df_betas[df_betas['Beta'].notna()]
df_cleaned.sort_values("Beta", ascending = False)

df_cleaned.to_csv("crypto_betas")

df_betas = pd.read_csv("/content/crypto_betas")
df_betas.head()

anvil.server.connect("2FHPU6NFGHWS3MPOZHU2XZID-G3THAFGNA7MMKPUF")

@anvil.server.callable

def calculate_risk(names, percentages):
  betas = list()
  if (sum([int(percentage) for percentage in percentages]) != 100):
      return "The Percentages Do Not Add Up To 100!"
  for i in range(len(names)):
    betas.append(df_betas[df_betas['Name'] == names[i].lower()]['Beta'].iloc[0] * (int(percentages[i]) / 100))
  risk_score = np.sum(betas)
  return risk_score 

anvil.server.wait_forever()